package com.example.TheMovies.Users;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /user (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path = "/addApi") // Map ONLY POST Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/all")
	public String getAllUsers(Model model) {
		Iterable<User> users = userRepository.findAll();
		model.addAttribute("users", users);
		return "UserList";
	}

	@GetMapping(path = "/details")
	public String details(@RequestParam(name = "id", required = true) int id, Model model) {
		Optional<User> user = userRepository.findById(id);
		if (user.isEmpty()) {
			return "UserNotFound";
		}

		model.addAttribute("id", id);
		model.addAttribute("name", user.get().getName());
		model.addAttribute("email", user.get().getEmail());

		return "UserDetails";
	}

	@GetMapping("/edit")
	public String showForm(@RequestParam(name = "id", required = false, defaultValue = "0") int id, Model model) {
		Optional<User> user = userRepository.findById(id);
		if (user.isEmpty()) {
			model.addAttribute("user", new User());
			return "UserEdit";
		}

		model.addAttribute("user", user.get());
		return "UserEdit";
	}

	@PostMapping("/add")
	public String addUser(@Valid User user, BindingResult bindingResult) {
		if (bindingResult.hasErrors()) {
			return "UserEdit";
		}

		userRepository.save(user);
		return "redirect:/user/details?id=" + user.getId();
	}

	@PostMapping("/delete")
	public String deleteUser(@RequestParam(name = "id", required = true) int id) {
		userRepository.deleteById(id);
		return "redirect:/user/all";
	}
}
